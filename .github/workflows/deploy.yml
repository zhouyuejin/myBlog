# 工作流名称：将VuePress博客部署到阿里云服务器
name: Deploy VuePress Blog to Aliyun

# 触发条件：
# 1. 当针对release分支的PR被关闭时触发
# 2. 支持手动触发（workflow_dispatch）
on:
  pull_request:
    branches: [release]  # 仅监听release分支的PR
    types: [closed]      # 仅在PR关闭时触发
  workflow_dispatch:     # 允许手动触发工作流

# 定义作业：检查冲突并部署
jobs:
  check-conflicts-and-deploy:
    runs-on: ubuntu-latest  # 使用最新的Ubuntu运行器
    steps:
      # 步骤1: 检查PR是否已合并且来自dev分支
      - name: Check if PR is merged and from dev branch
        if: github.event.pull_request.merged == true && github.event.pull_request.head.ref == 'dev'
        run: echo "PR已合并，从dev分支合并到release分支"

      # 步骤2: 检出代码
      - name: Checkout code
        if: github.event.pull_request.merged == true && github.event.pull_request.head.ref == 'dev'
        uses: actions/checkout@v4  # 使用GitHub官方的checkout动作
        with:
          fetch-depth: 0  # 克隆完整的提交历史，包括所有分支

      # 步骤3: 检查dev和release分支之间的冲突
      - name: Check for conflicts between dev and release
        if: github.event.pull_request.merged == true && github.event.pull_request.head.ref == 'dev'
        run: |
          git checkout release          # 切换到release分支
          git pull origin release       # 拉取release分支的最新代码
          git merge --no-commit --no-ff origin/dev  # 尝试合并dev分支（不提交，不快进）
          if [ $? -ne 0 ]; then         # 如果合并失败（存在冲突）
            echo "错误: 分支合并存在冲突，请解决冲突后再尝试"
            exit 1                      # 退出并标记失败
          fi
          echo "无冲突，可以继续部署"

      # 步骤4: 设置Node.js环境
      - name: Setup Node.js
        if: github.event.pull_request.merged == true && github.event.pull_request.head.ref == 'dev'
        uses: actions/setup-node@v4  # 使用GitHub官方的setup-node动作
        with:
          node-version: "latest"  # 使用最新的Node.js版本

      # 步骤5: 安装pnpm包管理器
      - name: Install pnpm
        uses: pnpm/action-setup@v2  # 使用pnpm官方的安装动作
        with:
          version: latest  # 安装最新版本的pnpm
          run_install: false  # 不自动运行pnpm install

      # 步骤6: 安装项目依赖
      - name: Install dependencies
        run: pnpm install  # 运行pnpm install安装依赖
        continue-on-error: false  # 如有错误，不继续执行

      # 步骤7: 构建项目
      - name: Build
        run: pnpm docs:build  # 运行构建命令
        continue-on-error: false  # 如有错误，不继续执行

      # 步骤8: 验证Nginx配置目录
      - name: Verify Nginx Config Directory
        run: |
          ls -la nginx-config/  # 列出nginx-config目录内容
          cat nginx-config/blog.conf  # 显示blog.conf配置文件内容

      # 步骤9: 上传Nginx配置
      - name: Upload Nginx Config
        uses: easingthemes/ssh-deploy@v2.1.5  # 使用ssh-deploy动作上传文件
        env:
          SSH_PRIVATE_KEY: ${{ secrets.ALIYUN_SERVER_SSH_KEY }}  # SSH私钥，从GitHub Secrets获取
          ARGS: "-rltgoDzvOv"  # rsync参数：递归、保持权限、时间戳等
          SOURCE: "nginx-config/"  # 本地源目录
          REMOTE_HOST: ${{ secrets.ALIYUN_SERVER_HOST }}  # 远程服务器地址
          REMOTE_USER: ${{ secrets.ALIYUN_SERVER_USER }}  # 远程服务器用户名
          TARGET: "/etc/nginx/sites-available/"  # 远程目标目录
          DEBUG: "true"  # 启用调试模式

      # 步骤10: 应用Nginx配置
      - name: Apply Nginx Config
        uses: appleboy/ssh-action@master  # 使用ssh-action在远程服务器执行命令
        with:
          host: ${{ secrets.ALIYUN_SERVER_HOST }}  # 远程服务器地址
          username: ${{ secrets.ALIYUN_SERVER_USER }}  # 远程服务器用户名
          key: ${{ secrets.ALIYUN_SERVER_SSH_KEY }}  # SSH私钥
          script: |
            ln -sf /etc/nginx/sites-available/blog.conf /etc/nginx/sites-enabled/  # 创建符号链接
            nginx -t  # 测试Nginx配置是否有效
            systemctl reload nginx  # 重新加载Nginx服务

      # 步骤11: 部署到阿里云服务器
      - name: Deploy to Aliyun Server
        if: github.event.pull_request.merged == true && github.event.pull_request.head.ref == 'dev'
        uses: easingthemes/ssh-deploy@v2.1.5  # 使用ssh-deploy动作部署文件
        env:
          SSH_PRIVATE_KEY: ${{ secrets.ALIYUN_SERVER_SSH_KEY }}  # SSH私钥
          ARGS: "-rltgoDzvO --delete"  # rsync参数：添加--delete删除远程多余文件
          SOURCE: "docs/.vuepress/dist"  # 本地构建输出目录
          REMOTE_HOST: ${{ secrets.ALIYUN_SERVER_HOST }}  # 远程服务器地址
          REMOTE_USER: ${{ secrets.ALIYUN_SERVER_USER }}  # 远程服务器用户名
          TARGET: "/usr/share/nginx/html/blog"  # 远程目标目录

      # 步骤12: 部署成功通知
      - name: Deploy success notification
        if: success()  # 仅当所有前面步骤成功时执行
        run: echo "部署成功！博客已更新到阿里云服务器"

      # 步骤13: 部署失败通知
      - name: Deploy failure notification
        if: failure()  # 仅当任何步骤失败时执行
        run: |
          echo "部署失败！请查看日志进行排查"
          exit 1  # 确保工作流标记为失败
